on:
  workflow_call:
    inputs:
      DEPLOY_ENV:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build-and-deploy:
    name: 'Build and Deploy'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_DEPLOY_ENV: ${{ inputs.DEPLOY_ENV }}
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: install deps
        run: npm ci

      - name: run test command
        run: npm run test

      - name: run update version (nonprod)
        run: npm version patch --no-git-tag-version
        if: inputs.DEPLOY_ENV != 'prod'

      - name: run update version (prod)
        run: npm version patch
        if: inputs.DEPLOY_ENV == 'prod'

      - name: run build command
        run: npm run build

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform -chdir="./deploy/${{ inputs.DEPLOY_ENV }}" init

        # On push to master, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: terraform -chdir="./deploy/${{ inputs.DEPLOY_ENV }}" apply -auto-approve

      - uses: stefanzweifel/git-auto-commit-action@v4
        name: Committing state changes
        with:
          commit_message: Committing state changes
